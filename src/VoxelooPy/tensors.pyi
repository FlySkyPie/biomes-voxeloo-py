from typing import Generic, TypeVar, Tuple, Union, Optional, Any
import numpy as np
from ctypes import c_uint8, c_uint16, c_uint32, c_uint64, c_int8, c_int16, c_int32, c_int64

T = TypeVar('T', bool, int, float)

class Tensor(Generic[T]):
    def __init__(self, shape: Tuple[int, int, int], fill: T = ...) -> None: ...
    def __str__(self) -> str: ...
    def fill(self, fill: T) -> None: ...
    def get(self, x: int, y: int, z: int) -> T: ...
    def assign(self, pos: np.ndarray[Any, np.dtype[np.int32]], val: np.ndarray[Any, np.dtype[T]]) -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> None: ...
    def dump(self) -> bytes: ...
    def load(self, blob: str) -> None: ...
    def array(self) -> np.ndarray[Any, np.dtype[T]]: ...
    @staticmethod
    def fromarray(array: np.ndarray[Any, np.dtype[T]]) -> 'Tensor[T]': ...

Tensor_Bool = Tensor[bool]
Tensor_I8 = Tensor[c_int8]
Tensor_I16 = Tensor[c_int16] 
Tensor_I32 = Tensor[c_int32]
Tensor_I64 = Tensor[c_int64]
Tensor_U8 = Tensor[c_uint8]
Tensor_U16 = Tensor[c_uint16]
Tensor_U32 = Tensor[c_uint32]
Tensor_U64 = Tensor[c_uint64]
Tensor_F32 = Tensor[float]
Tensor_F64 = Tensor[float]