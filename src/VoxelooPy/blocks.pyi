from typing import Generic, TypeVar, Tuple, Any
from ctypes import c_uint32
import numpy as np
import numpy.typing as npt

RGBA = c_uint32
T = TypeVar("T")

class GenericBlockList(Generic[T]):
    scale: float
    def __init__(self) -> None: ...
    def __getitem__(self, x: int, y: int, z: int) -> T: ...
    def dumps(self, compressed: bool = True) -> str: ...
    @staticmethod
    def loads(bytes: str, compressed: bool = True) -> "GenericBlockList[T]": ...
    def mesh(self) -> Any: ...  # Return type depends on meshes implementation
    def shift(self) -> Tuple[int, int, int]: ...
    def bounding_box(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_json(self) -> str: ...
    @staticmethod
    def from_json(json: str) -> "GenericBlockList[T]": ...
    def to_numpy(self) -> npt.NDArray: ...
    @staticmethod
    def from_numpy(
        vals: npt.NDArray, scale: float = 1.0, shift: Tuple[int, int, int] = (0, 0, 0)
    ) -> "GenericBlockList[T]": ...
    def to_sparse_numpy(self) -> Tuple[npt.NDArray, npt.NDArray, float]: ...
    @staticmethod
    def from_sparse_numpy(
        coords: npt.NDArray, vals: npt.NDArray, scale: float = 1.0
    ) -> "GenericBlockList[T]": ...
    def clone(self) -> "GenericBlockList[T]": ...

BlockList = GenericBlockList[RGBA]
