from typing import Generic, TypeVar, Tuple, List, Any
from ctypes import (
    c_int8,
    c_int16,
    c_int32,
    c_int64,
    c_uint16,
    c_uint32,
    c_uint64,
    c_uint8,
)
import numpy as np
import numpy.typing as npt

T = TypeVar(
    "T",
    bool,
    int,
    c_int8,
    c_int16,
    c_int32,
    c_int64,
    c_uint16,
    c_uint32,
    c_uint64,
    c_uint8,
)

class VolumeBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def assign(self, other: "VolumeBlock[T]") -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def array(self) -> np.ndarray: ...
    @staticmethod
    def fromarray(array: np.ndarray) -> "VolumeBlock[T]": ...
    def compact(self) -> None: ...

class SparseBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def values(self) -> List[Tuple[int, int, int, T]]: ...

SparseBlock_Bool = SparseBlock[bool]
SparseBlock_I16 = SparseBlock[c_int16]
SparseBlock_I32 = SparseBlock[c_int32]
SparseBlock_I64 = SparseBlock[c_int64]
SparseBlock_I8 = SparseBlock[c_int8]
SparseBlock_U16 = SparseBlock[c_uint16]
SparseBlock_U32 = SparseBlock[c_uint32]
SparseBlock_U64 = SparseBlock[c_uint64]
SparseBlock_U8 = SparseBlock[c_uint8]

VolumeBlock_Bool = VolumeBlock[bool]
VolumeBlock_I16 = VolumeBlock[c_int16]
VolumeBlock_I32 = VolumeBlock[c_int32]
VolumeBlock_I64 = VolumeBlock[c_int64]
VolumeBlock_I8 = VolumeBlock[c_int8]
VolumeBlock_U16 = VolumeBlock[c_uint16]
VolumeBlock_U32 = VolumeBlock[c_uint32]
VolumeBlock_U64 = VolumeBlock[c_uint64]
VolumeBlock_U8 = VolumeBlock[c_uint8]
