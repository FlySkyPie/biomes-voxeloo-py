from typing import Tuple, List
from ctypes import c_uint32
import numpy as np

RGBA = c_uint32
Vec3i = Tuple[int, int, int]

class DensityMap:
    def __init__(self) -> None: ...
    def has(self, x: int, y: int, z: int) -> bool: ...
    def get(self, x: int, y: int, z: int) -> float: ...
    def bounding_box(self) -> Tuple[Vec3i, Vec3i]: ...
    def numpy(self) -> np.ndarray: ...
    def blocks(
        self, threshold: float = 0.5, color: RGBA = ...
    ) -> ...: ...  # Return type depends on blocks.pyi
    def values(self) -> List[Tuple[int, int, int, float]]: ...
    def update(self, vals: List[Tuple[int, int, int, float]]) -> None: ...

class ColorMap:
    def __init__(self) -> None: ...
    def has(self, x: int, y: int, z: int) -> bool: ...
    def get(self, x: int, y: int, z: int) -> RGBA: ...
    def bounding_box(self) -> Tuple[Vec3i, Vec3i]: ...
    def numpy(self) -> np.ndarray: ...
    def blocks(self) -> ...: ...  # Return type depends on blocks.pyi
    def values(self) -> List[Tuple[int, int, int, RGBA]]: ...
    def update(self, vals: List[Tuple[int, int, int, RGBA]]) -> None: ...
