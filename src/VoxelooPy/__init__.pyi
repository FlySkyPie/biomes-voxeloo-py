from typing import Generic, TypeVar, Tuple, List, Any
import numpy as np

T = TypeVar('T', bool, int, float)

class VolumeBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def assign(self, other: 'VolumeBlock[T]') -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def array(self) -> np.ndarray: ...
    @staticmethod
    def fromarray(array: np.ndarray) -> 'VolumeBlock[T]': ...
    def compact(self) -> None: ...

class SparseBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def values(self) -> List[Tuple[int, int, int, T]]: ...

# Module-level bindings
def bind(vox_module: Any) -> None: ...