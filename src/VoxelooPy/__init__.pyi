from typing import Generic, TypeVar, Tuple, List, Any, Union
import numpy as np
import numpy.typing as npt

T = TypeVar('T', bool, int, float)
RGBA = Tuple[int, int, int, int]

class BlockList(Generic[T]):
    scale: float
    def __init__(self) -> None: ...
    def __getitem__(self, x: int, y: int, z: int) -> T: ...
    def dumps(self, compressed: bool = True) -> str: ...
    @staticmethod
    def loads(bytes: str, compressed: bool = True) -> 'BlockList[T]': ...
    def mesh(self) -> Any: ...  # Return type depends on meshes implementation
    def shift(self) -> Tuple[int, int, int]: ...
    def bounding_box(self) -> Tuple[Tuple[int, int, int], Tuple[int, int, int]]: ...
    def to_json(self) -> str: ...
    @staticmethod
    def from_json(json: str) -> 'BlockList[T]': ...
    def to_numpy(self) -> npt.NDArray: ...
    @staticmethod
    def from_numpy(
        vals: npt.NDArray,
        scale: float = 1.0,
        shift: Tuple[int, int, int] = (0, 0, 0)
    ) -> 'BlockList[T]': ...
    def to_sparse_numpy(self) -> Tuple[npt.NDArray, npt.NDArray, float]: ...
    @staticmethod
    def from_sparse_numpy(
        coords: npt.NDArray,
        vals: npt.NDArray,
        scale: float = 1.0
    ) -> 'BlockList[T]': ...
    def clone(self) -> 'BlockList[T]': ...

# Keep existing classes for backward compatibility
class VolumeBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def assign(self, other: 'VolumeBlock[T]') -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def array(self) -> np.ndarray: ...
    @staticmethod
    def fromarray(array: np.ndarray) -> 'VolumeBlock[T]': ...
    def compact(self) -> None: ...

class SparseBlock(Generic[T]):
    def __init__(self) -> None: ...
    def __getitem__(self, pos: Tuple[int, int, int]) -> T: ...
    def __setitem__(self, pos: Tuple[int, int, int], val: T) -> None: ...
    def dumps(self) -> str: ...
    def loads(self, blob: str) -> bool: ...
    def compressed_dumps(self) -> bytes: ...
    def compressed_loads(self, blob: bytes) -> bool: ...
    def raw_dumps(self) -> bytes: ...
    def raw_loads(self, blob: bytes) -> bool: ...
    def values(self) -> List[Tuple[int, int, int, T]]: ...

# Module-level bindings
def bind(vox_module: Any) -> None: ...